datasource sqlite {
  provider = "sqlite"
  url = "***"
  enabled  = false
}

datasource db {
  provider = "postgresql"
  url = "***"
  enabled  = true
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "node_modules/typegraphql-prisma-nestjs/generator.js"
  output   = "./dal"
}

model Account {
  id    String   @default(cuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email String @unique
  firstName String
  lastName String
  password  String
  accountUsers  AccountUser[]
}



enum Role {
  ADMIN
  USER
}

model Organization {
  id    String   @default(cuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name  String
  defaultTimeZone String
  address String
  projects  Project[]
  accountUsers AccountUser[]
}

model Project {
  id    String   @default(cuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  organization Organization
  name  String 
  entity  Entity[] 
  //@@index([organization])
}

model Entity {
  id    String   @default(cuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projects  Project
  name  String
  displayName String
  pluralDisplayName String
  description String
  isPersistent  Boolean
  allowFeedback Boolean // TBC
  primaryField  String
  entityFields  EntityField[]
}

model EntityField {
  id    String   @default(cuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  entity Entity
  name  String
  displayName String
  dataType  EnumDataType
  dataTypeProperties  String // JSON representation of the properties that relates based on selected type of field
  properties  String
  required  Boolean // TBD
  searchable  Boolean // TBD
  description String // TBD
}

enum EnumDataType {
  Text
  AutoNumber
  WholeNumber
  TimeZone
  Language
  DateAndTime
  Currancy
  DecimalNumber
  File
  Image
  Lookup
  CustomEntity
  OptionSet
  Boolean
  Color
  Guid
  Time
  CalculatedField
  RollupField
}


model AccountUser {
  id    String   @default(cuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  account Account
  organization Organization
  userRoles UserRole[]
}


model UserRole {
  id    String   @default(cuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accountUser  AccountUser
  roleLevel EnumRoleLevel
  createEntity  Boolean
  createFlow  Boolean
  createUi  Boolean
  createWebServices Boolean
}

enum EnumRoleLevel {
  Organization
  Project
}

