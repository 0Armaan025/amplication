datasource db {
  provider = "postgresql"
  url = "***"
  enabled  = true
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "node_modules/typegraphql-prisma-nestjs/generator.js"
  output   = "./dal"
}

model Account {
  id            String   @default(cuid()) @id
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  email         String   @unique
  firstName     String
  lastName      String
  password      String
  users         User[]   @relation("AccountOnUser")
  currentUser   User?    @relation(fields: [currentUserId], references: [id])
  currentUserId String?
}

model Organization {
  id              String   @default(cuid()) @id
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  name            String   @unique
  defaultTimeZone String
  address         String
  apps            App[]
  users           User[]
}

model User {
  id             String       @default(cuid()) @id
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  account        Account      @relation("AccountOnUser", fields: [accountId], references: [id])
  accountId      String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  userRoles      UserRole[]
  Account        Account[]

  @@unique([accountId, organizationId])
}

// enum Role {
// ADMIN
// USER
// ORGANIZATION_ADMIN
// PROJECT_ADMIN
// }
model UserRole {
  id        String   @default(cuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  role      String

  @@unique([userId, role])
}

model App {
  id             String       @default(cuid()) @id
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  name           String
  description    String
  entities       Entity[]

  @@unique([organizationId, name])
}

model Entity {
  id                String          @default(cuid()) @id
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deletedAt         DateTime?
  app               App             @relation(fields: [appId], references: [id])
  appId             String
  name              String
  displayName       String
  pluralDisplayName String
  description       String?
  isPersistent      Boolean
  // TBC
  allowFeedback     Boolean
  primaryField      String?
  EntityVersions    EntityVersion[]

  @@unique([appId, name])
  @@unique([appId, pluralDisplayName])
  @@unique([appId, displayName])
}

model EntityVersion {
  id            String        @default(cuid()) @id
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  entity        Entity        @relation(fields: [entityId], references: [id])
  entityId      String
  versionNumber Int
  label         String
  entityFields  EntityField[]

  @@unique([entityId, versionNumber])
}

model EntityField {
  id               String        @default(cuid()) @id
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  entityVersion    EntityVersion @relation(fields: [entityVersionId], references: [id])
  entityVersionId  String
  fieldPermanentId String        @default(cuid())
  name             String
  displayName      String
  dataType         EnumDataType
  properties       String
  required         Boolean
  // TBD
  searchable       Boolean
  description      String

  @@unique([entityVersionId, name])
  @@unique([entityVersionId, displayName])
}

enum EnumDataType {
  singleLineText
  multiLineText
  email
  state
  autoNumber
  wholeNumber
  dateTime
  decimalNumber
  file
  image
  lookup
  multiSelectOptionSet
  optionSet
  twoOptions
  boolean
  uniqueId
  geographicAddress
}