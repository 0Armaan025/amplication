# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - name: Fetch master
        run: git fetch --no-tags --prune --depth=1 origin +refs/heads/master:refs/remotes/origin/master
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Update npm
        run: npm i -g npm@7.3.0
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - run: npm ci
      - run: npm run bootstrap -- --loglevel verbose
      - run: npm run prisma:generate
      - name: Define Lerna since parameter
        run: echo "SINCE=origin/master" >> $GITHUB_ENV
        if: ${{ github.ref != 'refs/heads/master' }}
      - run: npm run check-format -- --since $SINCE
      - run: npm run build -- --since $SINCE
      - run: npm run lint -- --since $SINCE
      - run: npm run check-graphql-schema -- --since $SINCE
      - run: npm test -- --since $SINCE --ignore @amplication/e2e-tester
  e2e:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.ref == 'refs/heads/master' || contains('ci', github.ref)
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Update npm
        run: npm i -g npm@7.3.0
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - run: npm ci
      - name: Install packages dependencies
        run: npm run bootstrap -- --loglevel verbose
      - name: Build Data Service Generator
        run: npm run build -- --scope @amplication/data-service-generator --include-dependencies
      - name: "Data Service Generator: generate app"
        run: npm run generate-test-data-service
        working-directory: packages/amplication-data-service-generator
      - name: "Data Service Generator: install dependencies of the generated app and run unit tests"
        run: npm ci && npm run prisma:generate && npm test
        working-directory: packages/amplication-data-service-generator/generated/server
      - name: "Data Service Generator: E2E test"
        run: npm run test:e2e -- --scope @amplication/data-service-generator
  deploy:
    needs: e2e
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: github.ref == 'refs/heads/master' || contains('ci', github.ref)
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-buildx-action@v1
        with:
          driver-opt: image=moby/buildkit:master
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GOOGLE_CREDENTIALS }}
      - name: "Build and push amplication/amplication Docker image"
        uses: docker/build-push-action@v2
        with:
          pull: true
          push: true
          cache-from: type=registry,ref=amplication/amplication:latest
          cache-to: type=inline
          tags: |
            amplication/amplication:latest
            amplication/amplication:${{ github.sha }}
            gcr.io/amplication/amplication:${{ github.sha }}
      - name: "Build and push amplication/app-node Docker image"
        uses: docker/build-push-action@v2
        with:
          context: ./packages/amplication-data-service-generator
          file: ./packages/amplication-data-service-generator/Dockerfile
          pull: true
          push: true
          cache-from: type=registry,ref=amplication/app-node:latest
          cache-to: type=inline
          tags: |
            amplication/app-node:latest
            amplication/app-node:${{ github.sha }}
            gcr.io/amplication/app-node:${{ github.sha }}
      - name: "Build and push amplication/scheduler Docker image"
        uses: docker/build-push-action@v2
        with:
          context: ./packages/amplication-scheduler
          file: ./packages/amplication-scheduler/Dockerfile
          pull: true
          push: true
          cache-from: type=registry,ref=amplication/scheduler:latest
          cache-to: type=inline
          tags: |
            amplication/scheduler:latest
            amplication/scheduler:${{ github.sha }}
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.13.5
      - run: terraform init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        working-directory: terraform/envs/dev
      - run: terraform apply -auto-approve
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          TF_VAR_image_id: gcr.io/amplication/amplication:${{ github.sha }}
          TF_VAR_generated_app_base_image_id: gcr.io/amplication/app-node:${{ github.sha }}
        working-directory: terraform/envs/dev
      - uses: mattes/gce-cloudsql-proxy-action@v1
        with:
          creds: ${{ secrets.GOOGLE_CREDENTIALS }}
          instance: ${{ secrets.STAGING_DB_INSTANCE_NAME }}
      - run: |
          set -e;
          docker run \
            --network host
            --env POSTGRESQL_URL="postgresql://${{ secrets.STAGING_DB_USER }}:${{ secrets.STAGING_DB_PASSWORD }}@127.0.0.1:5432/${{ secrets.STAGING_DB_NAME }}"
            amplication/amplication:${{ github.sha }} \
            npm run migrate:up -- --create-db --auto-approve --experimental;
