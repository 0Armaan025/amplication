name: CD-AWS
on:
  workflow_dispatch:
    inputs:
      target-env:
        type: choice
        description: To which environment to deploy
        default: dev
        required: true
        options: 
        - dev
        - staging-os
        - staging
        - prod
        - temp
      source-branch:
        type: string
        description: Which branch to use for deployment
        default: main
        required: true
jobs:       
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: set branch-name
        run: |
            echo "BRANCH_NAME=$(echo $GITHUB_REF_NAME | sed "s/\//-/g")" >> $GITHUB_ENV
            echo "SOURCE_BRANCH_NAME=$(echo $SOURCE_BRANCH_NAME | sed "s/\//-/g")" >> $GITHUB_ENV
        env:
          SOURCE_BRANCH_NAME: ${{ github.event.inputs.source-branch }}
      - name: calculate docker tags
        id: calculate-docker-tags
        run: |
          sh ./.github/workflows/scripts/build-values-command.sh
        env:
          TARGET_ENV: ${{ github.event.inputs.target-env }}
      - name: set name space
        id: set name space
        run: |
          NAMESPACE=$TARGET_ENV
          if [ "$TARGET_ENV" = "temp" ]; then
            NAMESPACE+="-$SOURCE_BRANCH_NAME"
          fi
          echo "Will deploy to $NAMESPACE"
          echo "NAMESPACE=$NAMESPACE" >> $GITHUB_ENV
        env:
          TARGET_ENV: ${{ github.event.inputs.target-env }}
      - name: set cluster name
        id: set-cluster-name
        run: |
          CLUSTER_NAME="useast1-$TARGET_ENV"
          if [ "$TARGET_ENV" = "temp" ]; then
            CLUSTER_NAME="useast1-dev"
          fi
          echo "Will deploy to $CLUSTER_NAME eks cluster"
          echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV
        env:
          TARGET_ENV: ${{ github.event.inputs.target-env }}
      - name: set repo url
        id: set-repo-url
        run: |
          REPO_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY"
          echo "REPO_URL = $REPO_URL"
          echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
      - name: set app name
        id: set-app-name
        run: |
          APP_NAME="amplication-$NAMESPACE"
          echo "APP_NAME = $APP_NAME"
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
      - name: create app yaml
        id: create-app-yaml
        run: |
          cp ./argocd/app.yaml app.yaml
          sed -i "s|APP_NAME_PLACE_HOLER|$APP_NAME|g" app.yaml
          sed -i "s|REPO_URL_PLACE_HOLER|$REPO_URL|g" app.yaml
          sed -i "s|BRANCH_NAME_PLACE_HOLER|$GITHUB_REF_NAME|g" app.yaml
          sed -i "s|NAMESPACE_PLACE_HOLER|$NAMESPACE|g" app.yaml
          cat app.yaml
        env:
          TARGET_ENV: ${{ github.event.inputs.target-env }}
      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          aws-region: us-east-1
      - name: deploy app
        id: deploy-app
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME
          COMMONM_VALUES_FILE="$GITHUB_WORKSPACE/helm/charts/amplication/values-common.yaml"
          ENV_VALUES_FILE="$GITHUB_WORKSPACE/helm/charts/amplication/values-$TARGET_ENV.yaml"
          ARGO_CD_URL="argocd.amplication-$TARGET_ENV.com"
          if [ "$TARGET_ENV" = "temp"]; then
            ENV_VALUES_FILE="$GITHUB_WORKSPACE/helm/charts/amplication/values-dev.yaml"
            ARGO_CD_URL="argocd.amplication-dev.com"
          fi
          
          kubectl apply -f app.yaml

          COMMAND="argocd login $ARGO_CD_URL --username admin --password $ARGO_CD_PASSWORD --grpc-web"
          echo "$COMMAND"
          $COMMAND
          COMMAND="argocd app set $APP_NAME --values $COMMONM_VALUES_FILE --values $ENV_VALUES_FILE $VERSIONS"
          echo "$COMMAND"
          $COMMAND
        env:
          TARGET_ENV: ${{ github.event.inputs.target-env }}
          ARGO_CD_PASSWORD: ${{ secrets.ARGO_CD_PASSWORD }}
      