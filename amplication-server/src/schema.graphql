# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Account {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

type Auth {
  """JWT Bearer token"""
  token: String!
  account: Account!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

input ChangePasswordInput {
  oldPassword: String!
  newPassword: String!
}

"""Date custom scalar type"""
scalar Date

input DateTimeFilter {
  equals: Date
  not: Date
  in: [Date!]
  notIn: [Date!]
  lt: Date
  lte: Date
  gt: Date
  gte: Date
}

type Entity {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  name: String!
  displayName: String!
  pluralDisplayName: String!
  description: String!
  isPersistent: Boolean!
  allowFeedback: Boolean!
  primaryField: String!
  entityFields: [EntityField!]!
  versionNumber: Float
}

input EntityCreateInput {
  name: String!
  displayName: String!
  pluralDisplayName: String!
  description: String!
  isPersistent: Boolean!
  allowFeedback: Boolean!
  primaryField: String!
  project: WhereParentIdInput!
}

type EntityField {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  name: String!
  displayName: String!
  dataType: EnumDataType!
  dataTypeProperties: String!
  properties: String!
  required: Boolean!
  searchable: Boolean!
  description: String!
}

input EntityFieldConnectInput {
  connect: [WhereUniqueInput!]
}

input EntityFieldCreateInput {
  name: String!
  displayName: String!
  dataType: EnumDataType!
  dataTypeProperties: String!
  properties: String!
  required: Boolean!
  searchable: Boolean!
  description: String!
  entity: WhereParentIdInput!
}

input EntityFieldFilter {
  every: EntityFieldWhereInput
  some: EntityFieldWhereInput
  none: EntityFieldWhereInput
}

input EntityFieldUpdateInput {
  name: String
  displayName: String
  dataType: EnumDataType
  dataTypeProperties: String
  properties: String
  required: Boolean
  searchable: Boolean
  description: String
}

input EntityFieldWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  displayName: StringFilter
  dataType: EnumDataTypeFilter
  dataTypeProperties: StringFilter
  properties: StringFilter
  required: BooleanFilter
  searchable: BooleanFilter
  description: StringFilter
  AND: [EntityFieldWhereInput!]
  OR: [EntityFieldWhereInput!]
  NOT: [EntityFieldWhereInput!]
  entity: EntityWhereInput
}

input EntityOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
  name: OrderByArg
  displayName: OrderByArg
  pluralDisplayName: OrderByArg
  description: OrderByArg
  isPersistent: OrderByArg
  allowFeedback: OrderByArg
  primaryField: OrderByArg
}

input EntityUpdateInput {
  name: String
  displayName: String
  pluralDisplayName: String
  description: String
  isPersistent: Boolean
  allowFeedback: Boolean
  primaryField: String
}

type EntityVersion {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  versionNumber: Int!
  Label: String!
}

input EntityVersionCreateInput {
  versionNumber: Int!
  Label: String!
  entity: WhereParentIdInput!
  entityFields: EntityFieldConnectInput
}

input EntityVersionOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
  versionNumber: OrderByArg
  Label: OrderByArg
}

input EntityVersionWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  versionNumber: IntFilter
  Label: StringFilter
  entityFields: EntityFieldFilter
  AND: [EntityVersionWhereInput!]
  OR: [EntityVersionWhereInput!]
  NOT: [EntityVersionWhereInput!]
  entity: EntityWhereInput
}

input EntityWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  displayName: StringFilter
  pluralDisplayName: StringFilter
  description: StringFilter
  isPersistent: BooleanFilter
  allowFeedback: BooleanFilter
  primaryField: StringFilter
  entityFields: EntityFieldFilter
  AND: [EntityWhereInput!]
  OR: [EntityWhereInput!]
  NOT: [EntityWhereInput!]
  project: WhereUniqueInput
}

enum EnumDataType {
  Text
  AutoNumber
  WholeNumber
  TimeZone
  Language
  DateAndTime
  Currancy
  DecimalNumber
  File
  Image
  Lookup
  CustomEntity
  OptionSet
  Boolean
  Color
  Guid
  Time
  CalculatedField
  RollupField
}

input EnumDataTypeFilter {
  equals: EnumDataType
  not: EnumDataType
  in: [EnumDataType!]
  notIn: [EnumDataType!]
}

input IntFilter {
  equals: Int
  not: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

input InviteUserInput {
  email: String!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createProject(data: ProjectCreateInput!): Project!
  deleteProject(where: WhereUniqueInput!): Project
  updateProject(data: ProjectUpdateInput!, where: WhereUniqueInput!): Project
  deleteOrganization(where: WhereUniqueInput!): Organization
  updateOrganization(data: OrganizationUpdateInput!, where: WhereUniqueInput!): Organization
  inviteUser(data: InviteUserInput!): User
  assignRoleToUser(data: UserRoleInput!, where: WhereUniqueInput!): User
  removeRoleFromUser(data: UserRoleInput!, where: WhereUniqueInput!): User
  updateAccount(data: UpdateAccountInput!): Account!
  changePassword(data: ChangePasswordInput!): Account!
  signup(data: SignupInput!): Auth!
  login(data: LoginInput!): Auth!
  setCurrentOrganization(data: WhereUniqueInput!): Auth!
  createEntityField(data: EntityFieldCreateInput!): EntityField
  deleteOneEntityField(where: WhereUniqueInput!): EntityField
  updateOneEntityField(data: EntityFieldUpdateInput!, where: WhereUniqueInput!): EntityField
  createOneEntity(data: EntityCreateInput!): Entity!
  updateOneEntity(data: EntityUpdateInput!, where: WhereUniqueInput!): Entity
  createOneEntityVersion(data: EntityVersionCreateInput!): EntityVersion!
}

enum OrderByArg {
  asc
  desc
}

type Organization {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  name: String!
  defaultTimeZone: String!
  address: String!
}

input OrganizationOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
  name: OrderByArg
  defaultTimeZone: OrderByArg
  address: OrderByArg
}

input OrganizationUpdateInput {
  name: String
  defaultTimeZone: String
  address: String
}

input OrganizationWhereInput {
  id: String
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  defaultTimeZone: StringFilter
  address: StringFilter
}

type Project {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  name: String!
}

input ProjectCreateInput {
  name: String!
}

input ProjectOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
  name: OrderByArg
}

input ProjectUpdateInput {
  name: String
}

input ProjectWhereInput {
  id: String
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  organization: OrganizationWhereInput
}

type Query {
  project(where: WhereUniqueInput!): Project
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: WhereUniqueInput, before: WhereUniqueInput, first: Int, last: Int): [Project!]!
  Organization(where: WhereUniqueInput!): Organization
  Organizations(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, after: WhereUniqueInput, before: WhereUniqueInput, first: Int, last: Int): [Organization!]!
  user(where: WhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: WhereUniqueInput, before: WhereUniqueInput, first: Int, last: Int): [User!]!
  me: User!
  entityField(where: WhereUniqueInput!): EntityField
  entity(where: WhereUniqueInput!, version: Float): Entity
  entities(where: EntityWhereInput, orderBy: EntityOrderByInput, skip: Int, after: WhereUniqueInput, before: WhereUniqueInput, first: Int, last: Int): [Entity!]!
  entityVersions(where: EntityVersionWhereInput, orderBy: EntityVersionOrderByInput, skip: Int, after: WhereUniqueInput, before: WhereUniqueInput, first: Int, last: Int): [EntityVersion!]!
}

enum Role {
  ADMIN
  USER
  ORGANIZATION_ADMIN
  PROJECT_ADMIN
}

input SignupInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  organizationName: String!
  defaultTimeZone: String!
  address: String!
}

input StringFilter {
  equals: String
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}

input UpdateAccountInput {
  firstName: String
  lastName: String
}

type User {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  account: Account
  organization: Organization
  userRoles: [UserRole!]
}

input UserOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
}

type UserRole {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  role: Role!
}

input UserRoleInput {
  role: Role!
}

input UserWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  organization: OrganizationWhereInput
}

input WhereParentIdInput {
  connect: WhereUniqueInput!
}

input WhereUniqueInput {
  id: String!
}
