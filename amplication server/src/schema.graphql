# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

type Auth {
  """JWT Bearer token"""
  token: String!
  account: Account!
}

input ChangePasswordInput {
  oldPassword: String!
  newPassword: String!
}

"""Date custom scalar type"""
scalar Date

input DateTimeFilter {
  equals: Date
  not: Date
  in: [Date!]
  notIn: [Date!]
  lt: Date
  lte: Date
  gt: Date
  gte: Date
}

input InviteUserInput {
  email: String!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createProject(data: ProjectCreateInput!): Project!
  deleteProject(where: WhereUniqueInput!): Project
  updateProject(data: ProjectUpdateInput!, where: WhereUniqueInput!): Project
  deleteOrganization(where: WhereUniqueInput!): Organization
  updateOrganization(data: OrganizationUpdateInput!, where: WhereUniqueInput!): Organization
  inviteUser(data: InviteUserInput!): User
  assignRoleToUser(data: UserRoleInput!, where: WhereUniqueInput!): User
  removeRoleFromUser(data: UserRoleInput!, where: WhereUniqueInput!): User
  updateAccount(data: UpdateAccountInput!): Account!
  changePassword(data: ChangePasswordInput!): Account!
  signup(data: SignupInput!): Auth!
  login(data: LoginInput!): Auth!
}

enum OrderByArg {
  asc
  desc
}

type Organization {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  name: String!
  defaultTimeZone: String!
  address: String!
}

input OrganizationOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
  name: OrderByArg
  defaultTimeZone: OrderByArg
  address: OrderByArg
}

input OrganizationUpdateInput {
  name: String
  defaultTimeZone: String
  address: String
}

input OrganizationWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  defaultTimeZone: StringFilter
  address: StringFilter
  AND: [OrganizationWhereInput!]
  OR: [OrganizationWhereInput!]
  NOT: [OrganizationWhereInput!]
}

type Project {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  name: String!
}

input ProjectCreateInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String!
}

input ProjectOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
  name: OrderByArg
}

input ProjectUpdateInput {
  name: String
}

input ProjectWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  organization: OrganizationWhereInput
}

type Query {
  project(where: WhereUniqueInput!): Project
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: WhereUniqueInput, before: WhereUniqueInput, first: Int, last: Int): [Project!]!
  Organization(where: WhereUniqueInput!): Organization
  Organizations(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, after: WhereUniqueInput, before: WhereUniqueInput, first: Int, last: Int): [Organization!]!
  user(where: WhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: WhereUniqueInput, before: WhereUniqueInput, first: Int, last: Int): [User!]!
  me: User!
}

enum Role {
  ADMIN
  USER
  ORGANIZATION_ADMIN
  PROJECT_ADMIN
}

input SignupInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  organizationName: String!
  defaultTimeZone: String!
  address: String!
}

input StringFilter {
  equals: String
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}

input UpdateAccountInput {
  firstName: String
  lastName: String
}

type User {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  account: Account
  organization: Organization
  userRoles: [UserRole!]
}

input UserOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
}

type UserRole {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  role: Role!
}

input UserRoleInput {
  role: Role!
}

input UserWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  organization: OrganizationWhereInput
}

input WhereUniqueInput {
  id: String!
}
