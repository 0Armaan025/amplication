# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  email: String!
  firstname: String!
  lastName: String!
  password: String!
  accountUsers(where: AccountUserWhereInput, orderBy: AccountUserOrderByInput, skip: Int, after: AccountUserWhereUniqueInput, before: AccountUserWhereUniqueInput, first: Int, last: Int): [AccountUser!]
}

input AccountCreateInput {
  id: String
  createdAt: Date
  updatedAt: Date
  email: String!
  firstname: String!
  lastName: String!
  password: String!
  accountUsers: AccountUserCreateManyWithoutAccountInput
}

input AccountCreateOneWithoutAccountUsersInput {
  create: AccountCreateWithoutAccountUsersInput
  connect: AccountWhereUniqueInput
}

input AccountCreateWithoutAccountUsersInput {
  id: String
  createdAt: Date
  updatedAt: Date
  email: String!
  firstname: String!
  lastName: String!
  password: String!
}

input AccountOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
  email: OrderByArg
  firstname: OrderByArg
  lastName: OrderByArg
  password: OrderByArg
}

input AccountUpdateInput {
  id: String
  createdAt: Date
  updatedAt: Date
  email: String
  firstname: String
  lastName: String
  password: String
  accountUsers: AccountUserUpdateManyWithoutAccountInput
}

input AccountUpdateManyMutationInput {
  id: String
  createdAt: Date
  updatedAt: Date
  email: String
  firstname: String
  lastName: String
  password: String
}

input AccountUpdateOneRequiredWithoutAccountUsersInput {
  create: AccountCreateWithoutAccountUsersInput
  connect: AccountWhereUniqueInput
  update: AccountUpdateWithoutAccountUsersDataInput
  upsert: AccountUpsertWithoutAccountUsersInput
}

input AccountUpdateWithoutAccountUsersDataInput {
  id: String
  createdAt: Date
  updatedAt: Date
  email: String
  firstname: String
  lastName: String
  password: String
}

input AccountUpsertWithoutAccountUsersInput {
  update: AccountUpdateWithoutAccountUsersDataInput!
  create: AccountCreateWithoutAccountUsersInput!
}

type AccountUser {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  account: Account!
  organization: Organization!
  userRoles(where: UserRoleWhereInput, orderBy: UserRoleOrderByInput, skip: Int, after: UserRoleWhereUniqueInput, before: UserRoleWhereUniqueInput, first: Int, last: Int): [UserRole!]
}

input AccountUserCreateInput {
  id: String
  createdAt: Date
  updatedAt: Date
  account: AccountCreateOneWithoutAccountUsersInput!
  organization: OrganizationCreateOneWithoutAccountUsersInput!
  userRoles: UserRoleCreateManyWithoutAccountUserInput
}

input AccountUserCreateManyWithoutAccountInput {
  create: [AccountUserCreateWithoutAccountInput!]
  connect: [AccountUserWhereUniqueInput!]
}

input AccountUserCreateManyWithoutOrganizationInput {
  create: [AccountUserCreateWithoutOrganizationInput!]
  connect: [AccountUserWhereUniqueInput!]
}

input AccountUserCreateOneWithoutUserRolesInput {
  create: AccountUserCreateWithoutUserRolesInput
  connect: AccountUserWhereUniqueInput
}

input AccountUserCreateWithoutAccountInput {
  id: String
  createdAt: Date
  updatedAt: Date
  organization: OrganizationCreateOneWithoutAccountUsersInput!
  userRoles: UserRoleCreateManyWithoutAccountUserInput
}

input AccountUserCreateWithoutOrganizationInput {
  id: String
  createdAt: Date
  updatedAt: Date
  account: AccountCreateOneWithoutAccountUsersInput!
  userRoles: UserRoleCreateManyWithoutAccountUserInput
}

input AccountUserCreateWithoutUserRolesInput {
  id: String
  createdAt: Date
  updatedAt: Date
  account: AccountCreateOneWithoutAccountUsersInput!
  organization: OrganizationCreateOneWithoutAccountUsersInput!
}

input AccountUserFilter {
  every: AccountUserWhereInput
  some: AccountUserWhereInput
  none: AccountUserWhereInput
}

input AccountUserOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
}

input AccountUserScalarWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  userRoles: UserRoleFilter
  AND: [AccountUserScalarWhereInput!]
  OR: [AccountUserScalarWhereInput!]
  NOT: [AccountUserScalarWhereInput!]
}

input AccountUserUpdateInput {
  id: String
  createdAt: Date
  updatedAt: Date
  account: AccountUpdateOneRequiredWithoutAccountUsersInput
  organization: OrganizationUpdateOneRequiredWithoutAccountUsersInput
  userRoles: UserRoleUpdateManyWithoutAccountUserInput
}

input AccountUserUpdateManyDataInput {
  id: String
  createdAt: Date
  updatedAt: Date
}

input AccountUserUpdateManyMutationInput {
  id: String
  createdAt: Date
  updatedAt: Date
}

input AccountUserUpdateManyWithoutAccountInput {
  create: [AccountUserCreateWithoutAccountInput!]
  connect: [AccountUserWhereUniqueInput!]
  set: [AccountUserWhereUniqueInput!]
  disconnect: [AccountUserWhereUniqueInput!]
  delete: [AccountUserWhereUniqueInput!]
  update: [AccountUserUpdateWithWhereUniqueWithoutAccountInput!]
  updateMany: [AccountUserUpdateManyWithWhereNestedInput!]
  deleteMany: [AccountUserScalarWhereInput!]
  upsert: [AccountUserUpsertWithWhereUniqueWithoutAccountInput!]
}

input AccountUserUpdateManyWithoutOrganizationInput {
  create: [AccountUserCreateWithoutOrganizationInput!]
  connect: [AccountUserWhereUniqueInput!]
  set: [AccountUserWhereUniqueInput!]
  disconnect: [AccountUserWhereUniqueInput!]
  delete: [AccountUserWhereUniqueInput!]
  update: [AccountUserUpdateWithWhereUniqueWithoutOrganizationInput!]
  updateMany: [AccountUserUpdateManyWithWhereNestedInput!]
  deleteMany: [AccountUserScalarWhereInput!]
  upsert: [AccountUserUpsertWithWhereUniqueWithoutOrganizationInput!]
}

input AccountUserUpdateManyWithWhereNestedInput {
  where: AccountUserScalarWhereInput!
  data: AccountUserUpdateManyDataInput!
}

input AccountUserUpdateOneRequiredWithoutUserRolesInput {
  create: AccountUserCreateWithoutUserRolesInput
  connect: AccountUserWhereUniqueInput
  update: AccountUserUpdateWithoutUserRolesDataInput
  upsert: AccountUserUpsertWithoutUserRolesInput
}

input AccountUserUpdateWithoutAccountDataInput {
  id: String
  createdAt: Date
  updatedAt: Date
  organization: OrganizationUpdateOneRequiredWithoutAccountUsersInput
  userRoles: UserRoleUpdateManyWithoutAccountUserInput
}

input AccountUserUpdateWithoutOrganizationDataInput {
  id: String
  createdAt: Date
  updatedAt: Date
  account: AccountUpdateOneRequiredWithoutAccountUsersInput
  userRoles: UserRoleUpdateManyWithoutAccountUserInput
}

input AccountUserUpdateWithoutUserRolesDataInput {
  id: String
  createdAt: Date
  updatedAt: Date
  account: AccountUpdateOneRequiredWithoutAccountUsersInput
  organization: OrganizationUpdateOneRequiredWithoutAccountUsersInput
}

input AccountUserUpdateWithWhereUniqueWithoutAccountInput {
  where: AccountUserWhereUniqueInput!
  data: AccountUserUpdateWithoutAccountDataInput!
}

input AccountUserUpdateWithWhereUniqueWithoutOrganizationInput {
  where: AccountUserWhereUniqueInput!
  data: AccountUserUpdateWithoutOrganizationDataInput!
}

input AccountUserUpsertWithoutUserRolesInput {
  update: AccountUserUpdateWithoutUserRolesDataInput!
  create: AccountUserCreateWithoutUserRolesInput!
}

input AccountUserUpsertWithWhereUniqueWithoutAccountInput {
  where: AccountUserWhereUniqueInput!
  update: AccountUserUpdateWithoutAccountDataInput!
  create: AccountUserCreateWithoutAccountInput!
}

input AccountUserUpsertWithWhereUniqueWithoutOrganizationInput {
  where: AccountUserWhereUniqueInput!
  update: AccountUserUpdateWithoutOrganizationDataInput!
  create: AccountUserCreateWithoutOrganizationInput!
}

input AccountUserWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  userRoles: UserRoleFilter
  AND: [AccountUserWhereInput!]
  OR: [AccountUserWhereInput!]
  NOT: [AccountUserWhereInput!]
  account: AccountWhereInput
  organization: OrganizationWhereInput
}

input AccountUserWhereUniqueInput {
  id: String
}

input AccountWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  email: StringFilter
  firstname: StringFilter
  lastName: StringFilter
  password: StringFilter
  accountUsers: AccountUserFilter
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
}

input AccountWhereUniqueInput {
  id: String
}

type Auth {
  """JWT Bearer token"""
  token: String!
  user: User!
}

type BatchPayload {
  count: Int!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

"""Date custom scalar type"""
scalar Date

input DateTimeFilter {
  equals: Date
  not: Date
  in: [Date!]
  notIn: [Date!]
  lt: Date
  lte: Date
  gt: Date
  gte: Date
}

type Entity {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  name: String!
  displayName: String!
  pluralDisplayName: String!
  description: String!
  isPersistent: Boolean!
  allowFeedback: Boolean!
  primaryField: String!
  projects: Project!
  entityFields(where: EntityFieldWhereInput, orderBy: EntityFieldOrderByInput, skip: Int, after: EntityFieldWhereUniqueInput, before: EntityFieldWhereUniqueInput, first: Int, last: Int): [EntityField!]
}

input EntityCreateInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String!
  displayName: String!
  pluralDisplayName: String!
  description: String!
  isPersistent: Boolean!
  allowFeedback: Boolean!
  primaryField: String!
  projects: ProjectCreateOneWithoutEntityInput!
  entityFields: EntityFieldCreateManyWithoutEntityInput
}

input EntityCreateManyWithoutProjectsInput {
  create: [EntityCreateWithoutProjectsInput!]
  connect: [EntityWhereUniqueInput!]
}

input EntityCreateOneWithoutEntityFieldsInput {
  create: EntityCreateWithoutEntityFieldsInput
  connect: EntityWhereUniqueInput
}

input EntityCreateWithoutEntityFieldsInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String!
  displayName: String!
  pluralDisplayName: String!
  description: String!
  isPersistent: Boolean!
  allowFeedback: Boolean!
  primaryField: String!
  projects: ProjectCreateOneWithoutEntityInput!
}

input EntityCreateWithoutProjectsInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String!
  displayName: String!
  pluralDisplayName: String!
  description: String!
  isPersistent: Boolean!
  allowFeedback: Boolean!
  primaryField: String!
  entityFields: EntityFieldCreateManyWithoutEntityInput
}

type EntityField {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  name: String!
  displayName: String!
  dataType: EnumDataType!
  dataTypeProperties: String!
  properties: String!
  required: Boolean!
  searchable: Boolean!
  description: String!
  entity: Entity!
}

input EntityFieldCreateInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String!
  displayName: String!
  dataType: EnumDataType!
  dataTypeProperties: String!
  properties: String!
  required: Boolean!
  searchable: Boolean!
  description: String!
  entity: EntityCreateOneWithoutEntityFieldsInput!
}

input EntityFieldCreateManyWithoutEntityInput {
  create: [EntityFieldCreateWithoutEntityInput!]
  connect: [EntityFieldWhereUniqueInput!]
}

input EntityFieldCreateWithoutEntityInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String!
  displayName: String!
  dataType: EnumDataType!
  dataTypeProperties: String!
  properties: String!
  required: Boolean!
  searchable: Boolean!
  description: String!
}

input EntityFieldFilter {
  every: EntityFieldWhereInput
  some: EntityFieldWhereInput
  none: EntityFieldWhereInput
}

input EntityFieldOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
  name: OrderByArg
  displayName: OrderByArg
  dataType: OrderByArg
  dataTypeProperties: OrderByArg
  properties: OrderByArg
  required: OrderByArg
  searchable: OrderByArg
  description: OrderByArg
}

input EntityFieldScalarWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  displayName: StringFilter
  dataType: EnumDataTypeFilter
  dataTypeProperties: StringFilter
  properties: StringFilter
  required: BooleanFilter
  searchable: BooleanFilter
  description: StringFilter
  AND: [EntityFieldScalarWhereInput!]
  OR: [EntityFieldScalarWhereInput!]
  NOT: [EntityFieldScalarWhereInput!]
}

input EntityFieldUpdateInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String
  displayName: String
  dataType: EnumDataType
  dataTypeProperties: String
  properties: String
  required: Boolean
  searchable: Boolean
  description: String
  entity: EntityUpdateOneRequiredWithoutEntityFieldsInput
}

input EntityFieldUpdateManyDataInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String
  displayName: String
  dataType: EnumDataType
  dataTypeProperties: String
  properties: String
  required: Boolean
  searchable: Boolean
  description: String
}

input EntityFieldUpdateManyMutationInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String
  displayName: String
  dataType: EnumDataType
  dataTypeProperties: String
  properties: String
  required: Boolean
  searchable: Boolean
  description: String
}

input EntityFieldUpdateManyWithoutEntityInput {
  create: [EntityFieldCreateWithoutEntityInput!]
  connect: [EntityFieldWhereUniqueInput!]
  set: [EntityFieldWhereUniqueInput!]
  disconnect: [EntityFieldWhereUniqueInput!]
  delete: [EntityFieldWhereUniqueInput!]
  update: [EntityFieldUpdateWithWhereUniqueWithoutEntityInput!]
  updateMany: [EntityFieldUpdateManyWithWhereNestedInput!]
  deleteMany: [EntityFieldScalarWhereInput!]
  upsert: [EntityFieldUpsertWithWhereUniqueWithoutEntityInput!]
}

input EntityFieldUpdateManyWithWhereNestedInput {
  where: EntityFieldScalarWhereInput!
  data: EntityFieldUpdateManyDataInput!
}

input EntityFieldUpdateWithoutEntityDataInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String
  displayName: String
  dataType: EnumDataType
  dataTypeProperties: String
  properties: String
  required: Boolean
  searchable: Boolean
  description: String
}

input EntityFieldUpdateWithWhereUniqueWithoutEntityInput {
  where: EntityFieldWhereUniqueInput!
  data: EntityFieldUpdateWithoutEntityDataInput!
}

input EntityFieldUpsertWithWhereUniqueWithoutEntityInput {
  where: EntityFieldWhereUniqueInput!
  update: EntityFieldUpdateWithoutEntityDataInput!
  create: EntityFieldCreateWithoutEntityInput!
}

input EntityFieldWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  displayName: StringFilter
  dataType: EnumDataTypeFilter
  dataTypeProperties: StringFilter
  properties: StringFilter
  required: BooleanFilter
  searchable: BooleanFilter
  description: StringFilter
  AND: [EntityFieldWhereInput!]
  OR: [EntityFieldWhereInput!]
  NOT: [EntityFieldWhereInput!]
  entity: EntityWhereInput
}

input EntityFieldWhereUniqueInput {
  id: String
}

input EntityFilter {
  every: EntityWhereInput
  some: EntityWhereInput
  none: EntityWhereInput
}

input EntityOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
  name: OrderByArg
  displayName: OrderByArg
  pluralDisplayName: OrderByArg
  description: OrderByArg
  isPersistent: OrderByArg
  allowFeedback: OrderByArg
  primaryField: OrderByArg
}

input EntityScalarWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  displayName: StringFilter
  pluralDisplayName: StringFilter
  description: StringFilter
  isPersistent: BooleanFilter
  allowFeedback: BooleanFilter
  primaryField: StringFilter
  entityFields: EntityFieldFilter
  AND: [EntityScalarWhereInput!]
  OR: [EntityScalarWhereInput!]
  NOT: [EntityScalarWhereInput!]
}

input EntityUpdateInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String
  displayName: String
  pluralDisplayName: String
  description: String
  isPersistent: Boolean
  allowFeedback: Boolean
  primaryField: String
  projects: ProjectUpdateOneRequiredWithoutEntityInput
  entityFields: EntityFieldUpdateManyWithoutEntityInput
}

input EntityUpdateManyDataInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String
  displayName: String
  pluralDisplayName: String
  description: String
  isPersistent: Boolean
  allowFeedback: Boolean
  primaryField: String
}

input EntityUpdateManyMutationInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String
  displayName: String
  pluralDisplayName: String
  description: String
  isPersistent: Boolean
  allowFeedback: Boolean
  primaryField: String
}

input EntityUpdateManyWithoutProjectsInput {
  create: [EntityCreateWithoutProjectsInput!]
  connect: [EntityWhereUniqueInput!]
  set: [EntityWhereUniqueInput!]
  disconnect: [EntityWhereUniqueInput!]
  delete: [EntityWhereUniqueInput!]
  update: [EntityUpdateWithWhereUniqueWithoutProjectsInput!]
  updateMany: [EntityUpdateManyWithWhereNestedInput!]
  deleteMany: [EntityScalarWhereInput!]
  upsert: [EntityUpsertWithWhereUniqueWithoutProjectsInput!]
}

input EntityUpdateManyWithWhereNestedInput {
  where: EntityScalarWhereInput!
  data: EntityUpdateManyDataInput!
}

input EntityUpdateOneRequiredWithoutEntityFieldsInput {
  create: EntityCreateWithoutEntityFieldsInput
  connect: EntityWhereUniqueInput
  update: EntityUpdateWithoutEntityFieldsDataInput
  upsert: EntityUpsertWithoutEntityFieldsInput
}

input EntityUpdateWithoutEntityFieldsDataInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String
  displayName: String
  pluralDisplayName: String
  description: String
  isPersistent: Boolean
  allowFeedback: Boolean
  primaryField: String
  projects: ProjectUpdateOneRequiredWithoutEntityInput
}

input EntityUpdateWithoutProjectsDataInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String
  displayName: String
  pluralDisplayName: String
  description: String
  isPersistent: Boolean
  allowFeedback: Boolean
  primaryField: String
  entityFields: EntityFieldUpdateManyWithoutEntityInput
}

input EntityUpdateWithWhereUniqueWithoutProjectsInput {
  where: EntityWhereUniqueInput!
  data: EntityUpdateWithoutProjectsDataInput!
}

input EntityUpsertWithoutEntityFieldsInput {
  update: EntityUpdateWithoutEntityFieldsDataInput!
  create: EntityCreateWithoutEntityFieldsInput!
}

input EntityUpsertWithWhereUniqueWithoutProjectsInput {
  where: EntityWhereUniqueInput!
  update: EntityUpdateWithoutProjectsDataInput!
  create: EntityCreateWithoutProjectsInput!
}

input EntityWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  displayName: StringFilter
  pluralDisplayName: StringFilter
  description: StringFilter
  isPersistent: BooleanFilter
  allowFeedback: BooleanFilter
  primaryField: StringFilter
  entityFields: EntityFieldFilter
  AND: [EntityWhereInput!]
  OR: [EntityWhereInput!]
  NOT: [EntityWhereInput!]
  projects: ProjectWhereInput
}

input EntityWhereUniqueInput {
  id: String
}

enum EnumDataType {
  Text
  AutoNumber
  WholeNumber
  TimeZone
  Language
  DateAndTime
  Currancy
  DecimalNumber
  File
  Image
  Lookup
  CustomEntity
  OptionSet
  Boolean
  Color
  Guid
  Time
  CalculatedField
  RollupField
}

input EnumDataTypeFilter {
  equals: EnumDataType
  not: EnumDataType
  in: [EnumDataType!]
  notIn: [EnumDataType!]
}

enum EnumRoleLevel {
  Organization
  Project
}

input EnumRoleLevelFilter {
  equals: EnumRoleLevel
  not: EnumRoleLevel
  in: [EnumRoleLevel!]
  notIn: [EnumRoleLevel!]
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createOneAccount(data: AccountCreateInput!): Account!
  deleteOneAccount(where: AccountWhereUniqueInput!): Account
  updateOneAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account
  deleteManyAccount(where: AccountWhereInput): BatchPayload!
  updateManyAccount(data: AccountUpdateManyMutationInput!, where: AccountWhereInput): BatchPayload!
  upsertOneAccount(where: AccountWhereUniqueInput!, create: AccountCreateInput!, update: AccountUpdateInput!): Account!
  createOneAccountUser(data: AccountUserCreateInput!): AccountUser!
  deleteOneAccountUser(where: AccountUserWhereUniqueInput!): AccountUser
  updateOneAccountUser(data: AccountUserUpdateInput!, where: AccountUserWhereUniqueInput!): AccountUser
  deleteManyAccountUser(where: AccountUserWhereInput): BatchPayload!
  updateManyAccountUser(data: AccountUserUpdateManyMutationInput!, where: AccountUserWhereInput): BatchPayload!
  upsertOneAccountUser(where: AccountUserWhereUniqueInput!, create: AccountUserCreateInput!, update: AccountUserUpdateInput!): AccountUser!
  createOneEntity(data: EntityCreateInput!): Entity!
  deleteOneEntity(where: EntityWhereUniqueInput!): Entity
  updateOneEntity(data: EntityUpdateInput!, where: EntityWhereUniqueInput!): Entity
  deleteManyEntity(where: EntityWhereInput): BatchPayload!
  updateManyEntity(data: EntityUpdateManyMutationInput!, where: EntityWhereInput): BatchPayload!
  upsertOneEntity(where: EntityWhereUniqueInput!, create: EntityCreateInput!, update: EntityUpdateInput!): Entity!
  createOneEntityField(data: EntityFieldCreateInput!): EntityField!
  deleteOneEntityField(where: EntityFieldWhereUniqueInput!): EntityField
  updateOneEntityField(data: EntityFieldUpdateInput!, where: EntityFieldWhereUniqueInput!): EntityField
  deleteManyEntityField(where: EntityFieldWhereInput): BatchPayload!
  updateManyEntityField(data: EntityFieldUpdateManyMutationInput!, where: EntityFieldWhereInput): BatchPayload!
  upsertOneEntityField(where: EntityFieldWhereUniqueInput!, create: EntityFieldCreateInput!, update: EntityFieldUpdateInput!): EntityField!
  createOneOrganization(data: OrganizationCreateInput!): Organization!
  deleteOneOrganization(where: OrganizationWhereUniqueInput!): Organization
  updateOneOrganization(data: OrganizationUpdateInput!, where: OrganizationWhereUniqueInput!): Organization
  deleteManyOrganization(where: OrganizationWhereInput): BatchPayload!
  updateManyOrganization(data: OrganizationUpdateManyMutationInput!, where: OrganizationWhereInput): BatchPayload!
  upsertOneOrganization(where: OrganizationWhereUniqueInput!, create: OrganizationCreateInput!, update: OrganizationUpdateInput!): Organization!
  createOnePost(data: PostCreateInput!): Post!
  deleteOnePost(where: PostWhereUniqueInput!): Post
  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  deleteManyPost(where: PostWhereInput): BatchPayload!
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  createOneProject(data: ProjectCreateInput!): Project!
  deleteOneProject(where: ProjectWhereUniqueInput!): Project
  updateOneProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  deleteManyProject(where: ProjectWhereInput): BatchPayload!
  updateManyProject(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  upsertOneProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  createOneUser(data: UserCreateInput!): User!
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteManyUser(where: UserWhereInput): BatchPayload!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  createOneUserRole(data: UserRoleCreateInput!): UserRole!
  deleteOneUserRole(where: UserRoleWhereUniqueInput!): UserRole
  updateOneUserRole(data: UserRoleUpdateInput!, where: UserRoleWhereUniqueInput!): UserRole
  deleteManyUserRole(where: UserRoleWhereInput): BatchPayload!
  updateManyUserRole(data: UserRoleUpdateManyMutationInput!, where: UserRoleWhereInput): BatchPayload!
  upsertOneUserRole(where: UserRoleWhereUniqueInput!, create: UserRoleCreateInput!, update: UserRoleUpdateInput!): UserRole!
  signup(data: SignupInput!): Auth!
  login(data: LoginInput!): Auth!
}

input NullableStringFilter {
  equals: String
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}

enum OrderByArg {
  asc
  desc
}

type Organization {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  name: String!
  defaultTimeZone: String!
  address: String!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: ProjectWhereUniqueInput, before: ProjectWhereUniqueInput, first: Int, last: Int): [Project!]
  accountUsers(where: AccountUserWhereInput, orderBy: AccountUserOrderByInput, skip: Int, after: AccountUserWhereUniqueInput, before: AccountUserWhereUniqueInput, first: Int, last: Int): [AccountUser!]
}

input OrganizationCreateInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String!
  defaultTimeZone: String!
  address: String!
  projects: ProjectCreateManyWithoutOrganizationInput
  accountUsers: AccountUserCreateManyWithoutOrganizationInput
}

input OrganizationCreateOneWithoutAccountUsersInput {
  create: OrganizationCreateWithoutAccountUsersInput
  connect: OrganizationWhereUniqueInput
}

input OrganizationCreateOneWithoutProjectsInput {
  create: OrganizationCreateWithoutProjectsInput
  connect: OrganizationWhereUniqueInput
}

input OrganizationCreateWithoutAccountUsersInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String!
  defaultTimeZone: String!
  address: String!
  projects: ProjectCreateManyWithoutOrganizationInput
}

input OrganizationCreateWithoutProjectsInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String!
  defaultTimeZone: String!
  address: String!
  accountUsers: AccountUserCreateManyWithoutOrganizationInput
}

input OrganizationOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
  name: OrderByArg
  defaultTimeZone: OrderByArg
  address: OrderByArg
}

input OrganizationUpdateInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String
  defaultTimeZone: String
  address: String
  projects: ProjectUpdateManyWithoutOrganizationInput
  accountUsers: AccountUserUpdateManyWithoutOrganizationInput
}

input OrganizationUpdateManyMutationInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String
  defaultTimeZone: String
  address: String
}

input OrganizationUpdateOneRequiredWithoutAccountUsersInput {
  create: OrganizationCreateWithoutAccountUsersInput
  connect: OrganizationWhereUniqueInput
  update: OrganizationUpdateWithoutAccountUsersDataInput
  upsert: OrganizationUpsertWithoutAccountUsersInput
}

input OrganizationUpdateOneRequiredWithoutProjectsInput {
  create: OrganizationCreateWithoutProjectsInput
  connect: OrganizationWhereUniqueInput
  update: OrganizationUpdateWithoutProjectsDataInput
  upsert: OrganizationUpsertWithoutProjectsInput
}

input OrganizationUpdateWithoutAccountUsersDataInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String
  defaultTimeZone: String
  address: String
  projects: ProjectUpdateManyWithoutOrganizationInput
}

input OrganizationUpdateWithoutProjectsDataInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String
  defaultTimeZone: String
  address: String
  accountUsers: AccountUserUpdateManyWithoutOrganizationInput
}

input OrganizationUpsertWithoutAccountUsersInput {
  update: OrganizationUpdateWithoutAccountUsersDataInput!
  create: OrganizationCreateWithoutAccountUsersInput!
}

input OrganizationUpsertWithoutProjectsInput {
  update: OrganizationUpdateWithoutProjectsDataInput!
  create: OrganizationCreateWithoutProjectsInput!
}

input OrganizationWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  defaultTimeZone: StringFilter
  address: StringFilter
  projects: ProjectFilter
  accountUsers: AccountUserFilter
  AND: [OrganizationWhereInput!]
  OR: [OrganizationWhereInput!]
  NOT: [OrganizationWhereInput!]
}

input OrganizationWhereUniqueInput {
  id: String
}

type Post {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  published: Boolean!
  title: String!
  content: String
  author: User
}

input PostCreateInput {
  id: String
  createdAt: Date
  updatedAt: Date
  published: Boolean!
  title: String!
  content: String
  author: UserCreateOneWithoutPostsInput
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutAuthorInput {
  id: String
  createdAt: Date
  updatedAt: Date
  published: Boolean!
  title: String!
  content: String
}

input PostFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input PostOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
  published: OrderByArg
  title: OrderByArg
  content: OrderByArg
}

input PostScalarWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  published: BooleanFilter
  title: StringFilter
  content: NullableStringFilter
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

input PostUpdateInput {
  id: String
  createdAt: Date
  updatedAt: Date
  published: Boolean
  title: String
  content: String
  author: UserUpdateOneWithoutPostsInput
}

input PostUpdateManyDataInput {
  id: String
  createdAt: Date
  updatedAt: Date
  published: Boolean
  title: String
  content: String
}

input PostUpdateManyMutationInput {
  id: String
  createdAt: Date
  updatedAt: Date
  published: Boolean
  title: String
  content: String
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  deleteMany: [PostScalarWhereInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateWithoutAuthorDataInput {
  id: String
  createdAt: Date
  updatedAt: Date
  published: Boolean
  title: String
  content: String
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  published: BooleanFilter
  title: StringFilter
  content: NullableStringFilter
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  author: UserWhereInput
}

input PostWhereUniqueInput {
  id: String
}

type Project {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  name: String!
  defaultTimeZone: String!
  organization: Organization!
  entity(where: EntityWhereInput, orderBy: EntityOrderByInput, skip: Int, after: EntityWhereUniqueInput, before: EntityWhereUniqueInput, first: Int, last: Int): [Entity!]
}

input ProjectCreateInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String!
  defaultTimeZone: String!
  organization: OrganizationCreateOneWithoutProjectsInput!
  entity: EntityCreateManyWithoutProjectsInput
}

input ProjectCreateManyWithoutOrganizationInput {
  create: [ProjectCreateWithoutOrganizationInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateOneWithoutEntityInput {
  create: ProjectCreateWithoutEntityInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateWithoutEntityInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String!
  defaultTimeZone: String!
  organization: OrganizationCreateOneWithoutProjectsInput!
}

input ProjectCreateWithoutOrganizationInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String!
  defaultTimeZone: String!
  entity: EntityCreateManyWithoutProjectsInput
}

input ProjectFilter {
  every: ProjectWhereInput
  some: ProjectWhereInput
  none: ProjectWhereInput
}

input ProjectOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
  name: OrderByArg
  defaultTimeZone: OrderByArg
}

input ProjectScalarWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  defaultTimeZone: StringFilter
  entity: EntityFilter
  AND: [ProjectScalarWhereInput!]
  OR: [ProjectScalarWhereInput!]
  NOT: [ProjectScalarWhereInput!]
}

input ProjectUpdateInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String
  defaultTimeZone: String
  organization: OrganizationUpdateOneRequiredWithoutProjectsInput
  entity: EntityUpdateManyWithoutProjectsInput
}

input ProjectUpdateManyDataInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String
  defaultTimeZone: String
}

input ProjectUpdateManyMutationInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String
  defaultTimeZone: String
}

input ProjectUpdateManyWithoutOrganizationInput {
  create: [ProjectCreateWithoutOrganizationInput!]
  connect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  delete: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutOrganizationInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
  deleteMany: [ProjectScalarWhereInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutOrganizationInput!]
}

input ProjectUpdateManyWithWhereNestedInput {
  where: ProjectScalarWhereInput!
  data: ProjectUpdateManyDataInput!
}

input ProjectUpdateOneRequiredWithoutEntityInput {
  create: ProjectCreateWithoutEntityInput
  connect: ProjectWhereUniqueInput
  update: ProjectUpdateWithoutEntityDataInput
  upsert: ProjectUpsertWithoutEntityInput
}

input ProjectUpdateWithoutEntityDataInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String
  defaultTimeZone: String
  organization: OrganizationUpdateOneRequiredWithoutProjectsInput
}

input ProjectUpdateWithoutOrganizationDataInput {
  id: String
  createdAt: Date
  updatedAt: Date
  name: String
  defaultTimeZone: String
  entity: EntityUpdateManyWithoutProjectsInput
}

input ProjectUpdateWithWhereUniqueWithoutOrganizationInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutOrganizationDataInput!
}

input ProjectUpsertWithoutEntityInput {
  update: ProjectUpdateWithoutEntityDataInput!
  create: ProjectCreateWithoutEntityInput!
}

input ProjectUpsertWithWhereUniqueWithoutOrganizationInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutOrganizationDataInput!
  create: ProjectCreateWithoutOrganizationInput!
}

input ProjectWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  defaultTimeZone: StringFilter
  entity: EntityFilter
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  organization: OrganizationWhereInput
}

input ProjectWhereUniqueInput {
  id: String
}

type Query {
  account(where: AccountWhereUniqueInput!): Account
  accounts(where: AccountWhereInput, orderBy: AccountOrderByInput, skip: Int, after: AccountWhereUniqueInput, before: AccountWhereUniqueInput, first: Int, last: Int): [Account!]!
  accountUser(where: AccountUserWhereUniqueInput!): AccountUser
  accountUsers(where: AccountUserWhereInput, orderBy: AccountUserOrderByInput, skip: Int, after: AccountUserWhereUniqueInput, before: AccountUserWhereUniqueInput, first: Int, last: Int): [AccountUser!]!
  entity(where: EntityWhereUniqueInput!): Entity
  entities(where: EntityWhereInput, orderBy: EntityOrderByInput, skip: Int, after: EntityWhereUniqueInput, before: EntityWhereUniqueInput, first: Int, last: Int): [Entity!]!
  entityField(where: EntityFieldWhereUniqueInput!): EntityField
  entityFields(where: EntityFieldWhereInput, orderBy: EntityFieldOrderByInput, skip: Int, after: EntityFieldWhereUniqueInput, before: EntityFieldWhereUniqueInput, first: Int, last: Int): [EntityField!]!
  organization(where: OrganizationWhereUniqueInput!): Organization
  organizations(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, after: OrganizationWhereUniqueInput, before: OrganizationWhereUniqueInput, first: Int, last: Int): [Organization!]!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int): [Post!]!
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: ProjectWhereUniqueInput, before: ProjectWhereUniqueInput, first: Int, last: Int): [Project!]!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  userRole(where: UserRoleWhereUniqueInput!): UserRole
  userRoles(where: UserRoleWhereInput, orderBy: UserRoleOrderByInput, skip: Int, after: UserRoleWhereUniqueInput, before: UserRoleWhereUniqueInput, first: Int, last: Int): [UserRole!]!
}

enum Role {
  ADMIN
  USER
}

input RoleFilter {
  equals: Role
  not: Role
  in: [Role!]
  notIn: [Role!]
}

input SignupInput {
  email: String!
  password: String!
  firstname: String
  lastname: String
}

input StringFilter {
  equals: String
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}

type User {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  email: String!
  password: String!
  firstname: String
  lastname: String
  role: Role!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int): [Post!]
}

input UserCreateInput {
  id: String
  createdAt: Date
  updatedAt: Date
  email: String!
  password: String!
  firstname: String
  lastname: String
  role: Role!
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPostsInput {
  id: String
  createdAt: Date
  updatedAt: Date
  email: String!
  password: String!
  firstname: String
  lastname: String
  role: Role!
}

input UserOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
  email: OrderByArg
  password: OrderByArg
  firstname: OrderByArg
  lastname: OrderByArg
  role: OrderByArg
}

type UserRole {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  roleLevel: EnumRoleLevel!
  createEntity: Boolean!
  createFlow: Boolean!
  createUi: Boolean!
  createWebServices: Boolean!
  accountUser: AccountUser!
}

input UserRoleCreateInput {
  id: String
  createdAt: Date
  updatedAt: Date
  roleLevel: EnumRoleLevel!
  createEntity: Boolean!
  createFlow: Boolean!
  createUi: Boolean!
  createWebServices: Boolean!
  accountUser: AccountUserCreateOneWithoutUserRolesInput!
}

input UserRoleCreateManyWithoutAccountUserInput {
  create: [UserRoleCreateWithoutAccountUserInput!]
  connect: [UserRoleWhereUniqueInput!]
}

input UserRoleCreateWithoutAccountUserInput {
  id: String
  createdAt: Date
  updatedAt: Date
  roleLevel: EnumRoleLevel!
  createEntity: Boolean!
  createFlow: Boolean!
  createUi: Boolean!
  createWebServices: Boolean!
}

input UserRoleFilter {
  every: UserRoleWhereInput
  some: UserRoleWhereInput
  none: UserRoleWhereInput
}

input UserRoleOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
  roleLevel: OrderByArg
  createEntity: OrderByArg
  createFlow: OrderByArg
  createUi: OrderByArg
  createWebServices: OrderByArg
}

input UserRoleScalarWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  roleLevel: EnumRoleLevelFilter
  createEntity: BooleanFilter
  createFlow: BooleanFilter
  createUi: BooleanFilter
  createWebServices: BooleanFilter
  AND: [UserRoleScalarWhereInput!]
  OR: [UserRoleScalarWhereInput!]
  NOT: [UserRoleScalarWhereInput!]
}

input UserRoleUpdateInput {
  id: String
  createdAt: Date
  updatedAt: Date
  roleLevel: EnumRoleLevel
  createEntity: Boolean
  createFlow: Boolean
  createUi: Boolean
  createWebServices: Boolean
  accountUser: AccountUserUpdateOneRequiredWithoutUserRolesInput
}

input UserRoleUpdateManyDataInput {
  id: String
  createdAt: Date
  updatedAt: Date
  roleLevel: EnumRoleLevel
  createEntity: Boolean
  createFlow: Boolean
  createUi: Boolean
  createWebServices: Boolean
}

input UserRoleUpdateManyMutationInput {
  id: String
  createdAt: Date
  updatedAt: Date
  roleLevel: EnumRoleLevel
  createEntity: Boolean
  createFlow: Boolean
  createUi: Boolean
  createWebServices: Boolean
}

input UserRoleUpdateManyWithoutAccountUserInput {
  create: [UserRoleCreateWithoutAccountUserInput!]
  connect: [UserRoleWhereUniqueInput!]
  set: [UserRoleWhereUniqueInput!]
  disconnect: [UserRoleWhereUniqueInput!]
  delete: [UserRoleWhereUniqueInput!]
  update: [UserRoleUpdateWithWhereUniqueWithoutAccountUserInput!]
  updateMany: [UserRoleUpdateManyWithWhereNestedInput!]
  deleteMany: [UserRoleScalarWhereInput!]
  upsert: [UserRoleUpsertWithWhereUniqueWithoutAccountUserInput!]
}

input UserRoleUpdateManyWithWhereNestedInput {
  where: UserRoleScalarWhereInput!
  data: UserRoleUpdateManyDataInput!
}

input UserRoleUpdateWithoutAccountUserDataInput {
  id: String
  createdAt: Date
  updatedAt: Date
  roleLevel: EnumRoleLevel
  createEntity: Boolean
  createFlow: Boolean
  createUi: Boolean
  createWebServices: Boolean
}

input UserRoleUpdateWithWhereUniqueWithoutAccountUserInput {
  where: UserRoleWhereUniqueInput!
  data: UserRoleUpdateWithoutAccountUserDataInput!
}

input UserRoleUpsertWithWhereUniqueWithoutAccountUserInput {
  where: UserRoleWhereUniqueInput!
  update: UserRoleUpdateWithoutAccountUserDataInput!
  create: UserRoleCreateWithoutAccountUserInput!
}

input UserRoleWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  roleLevel: EnumRoleLevelFilter
  createEntity: BooleanFilter
  createFlow: BooleanFilter
  createUi: BooleanFilter
  createWebServices: BooleanFilter
  AND: [UserRoleWhereInput!]
  OR: [UserRoleWhereInput!]
  NOT: [UserRoleWhereInput!]
  accountUser: AccountUserWhereInput
}

input UserRoleWhereUniqueInput {
  id: String
}

input UserUpdateInput {
  id: String
  createdAt: Date
  updatedAt: Date
  email: String
  password: String
  firstname: String
  lastname: String
  role: Role
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  id: String
  createdAt: Date
  updatedAt: Date
  email: String
  password: String
  firstname: String
  lastname: String
  role: Role
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutPostsDataInput {
  id: String
  createdAt: Date
  updatedAt: Date
  email: String
  password: String
  firstname: String
  lastname: String
  role: Role
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  email: StringFilter
  password: StringFilter
  firstname: NullableStringFilter
  lastname: NullableStringFilter
  posts: PostFilter
  role: RoleFilter
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: String
  email: String
}
